
Сервер должен всегда рендерить страницы по-умолчанию без авторизации.
Срок жизни SID в базе - 12 часов.

---------------------------------------------------------------------

Алгоритм /registry POST

CLIENT 
/registry POST (login, password, name, email)

SERVER
получаем объект user ->
дополняем его данными:
user.confirmed = false
user.hash = cripto(login, password, secret)
user.tasks = [] // это сделает Mongoose ->
добавляем пользователя в базу Юзеров ->
если ошибка записи в базу Юзеров -> вернуть json(500, new Error('Reg error')) или редирект '/registry' если выключен js
если запись успешна -> редирект '/login'
опционально: отправляем на email код подтверждения

---------------------------------------------------------------------

Алгоритм /login POST

CLIENT 
/login POST (login, password)

SERVER
получить HASH для поиска -> cripto(login, password, secret) ->
найти юзера в базе Юзеров (HASH) -> 
если юзера в базе Юзеров нет -> вернуть json(404, new Error('No such user')) или редирект '/login' если выключен js
если юзер в базе Юзеров есть -> создать новый временный oбъект { SID, HASH } -> 
записать новый объект в базу Сессий -> 
при ошибке - вернуть json(500, new Error('Login error')) или редирект '/login' если выключен js
записать новый SID в HEAD ответа -> 
редирект '/'

CLIENT 
/ GET (SID)

SERVER
проверить наличие и валидность SID ->
если SID отсутствует -> вернуть неавторизированную разметку '/'
если SID есть -> ищем клиентский SID в базе Сессий -> 
если SID в базе Сессий не найден -> удаляем SID в HEAD -> вернуть неавторизированную разметку '/'
если SID в базе Сессий найден -> получаем HASH -> 
ищем юзера в базе Юзеров (HASH) -> 
если юзера в базе Юзеров нет -> удаляем SID в HEAD -> вернуть неавторизированную разметку '/'
если юзер в базе Юзеров есть -> вернуть авторизированную разметку '/' (userId + userName)

---------------------------------------------------------------------

Алгоритм /logout POST

CLIENT
/logout POST (userId, userName)

SERVER
проверить наличие и валидность SID ->
если SID отсутствует -> редирект '/'
если SID есть -> ищем клиентский SID в базе Сессий -> 
если SID в базе Сессий не найден -> редирект '/'
если SID в базе Сессий найден -> получаем HASH -> 
удаляем из базы Сессий все объекты с таким HASH ->
удаляем SID в HEAD -> редирект '/'

---------------------------------------------------------------------






























